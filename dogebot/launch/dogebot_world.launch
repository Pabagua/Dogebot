<launch>
  <arg name="gui"        default="true"/>
  <arg name="world_file" default="$(env TURTLEBOT_GAZEBO_WORLD_FILE)"/>

  <arg name="base"       value="$(optenv TURTLEBOT_BASE kobuki)"/> <!-- create, roomba -->
  <arg name="battery"    value="$(optenv TURTLEBOT_BATTERY /proc/acpi/battery/BAT0)"/>  <!-- /proc/acpi/battery/BAT0 -->
  <arg name="stacks"     value="$(optenv TURTLEBOT_STACKS hexagons)"/>  <!-- circles, hexagons -->
  <arg name="3d_sensor"  value="$(optenv TURTLEBOT_3D_SENSOR kinect)"/>  <!-- kinect, asus_xtion_pro -->
  
  <arg name="model_ball" default="$(optenv TURTLEBOT_BASE kobuki)"/>
  <arg name="x2_pos" default="-2.0"/>
  <arg name="y2_pos" default="-1"/>
  <arg name="z2_pos" default="0.4"/>
  
  <arg name="model_cube" default="$(optenv TURTLEBOT_BASE kobuki)"/>
  <arg name="x3_pos" default="1.0"/>
  <arg name="y3_pos" default="1.0"/>
  <arg name="z3_pos" default="1.0"/>

  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="use_sim_time" value="true"/>
    <arg name="debug" value="false"/>
    <arg name="gui" value="$(arg gui)" />
    <arg name="world_name" value="$(find dogebot)/worlds/doge.world"/>
  </include>

  <include file="$(find turtlebot_gazebo)/launch/includes/$(arg base).launch.xml">
    <arg name="base" value="$(arg base)"/>
    <arg name="stacks" value="$(arg stacks)"/>
    <arg name="3d_sensor" value="$(arg 3d_sensor)"/>
  </include>

  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>
  
  <param name="ball_description" command="cat '$(find dogebot)/models/balon.urdf'" />
  <node name="spawn_urdf_ball" pkg="gazebo_ros" type="spawn_model" args="-urdf -model ball_$(arg model_ball) -x $(arg x2_pos) -y $(arg y2_pos) -z $(arg z2_pos) -param ball_description" />

  <param name="cube_description" command="cat '$(find dogebot)/models/cube.urdf'" />
  <node name="spawn_urdf_cube" pkg="gazebo_ros" type="spawn_model" args="-urdf -model cube_$(arg model_cube) -x $(arg x3_pos) -y $(arg y3_pos) -z $(arg z3_pos) -param cube_description" />

  <!-- Fake laser -->
  <node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>
  <node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan"
        args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
    <param name="scan_height" value="10"/>
    <param name="output_frame_id" value="camera_depth_frame"/>
    <param name="range_min" value="0.45"/>
    <remap from="image" to="/camera/depth/image_raw"/>
    <remap from="scan" to="/scan"/>
  </node>
</launch>
